<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nora&#39;s blog</title>
  
  <subtitle>Love Coding</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangyiii.github.io/"/>
  <updated>2018-05-19T07:45:28.000Z</updated>
  <id>https://yangyiii.github.io/</id>
  
  <author>
    <name>Nora</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>容易出错的JavaScript题目集锦</title>
    <link href="https://yangyiii.github.io/2018/05/19/%E6%9C%89%E8%B6%A3%E7%9A%84JavaScript%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>https://yangyiii.github.io/2018/05/19/有趣的JavaScript题集锦/</id>
    <published>2018-05-19T07:41:11.000Z</published>
    <updated>2018-05-19T07:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="容易出错的JavaScript题目集锦"><a href="#容易出错的JavaScript题目集锦" class="headerlink" title="容易出错的JavaScript题目集锦"></a>容易出错的JavaScript题目集锦</h3><a id="more"></a>  <p>1.typeof(null) 会得到什么？<br>object,在JavaScript中null被认为是一个对象。</p><p>2.下列代码将输出控制台的是什么？为什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  var a = b = 3;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">"a defined? "</span> + (typeof a !== <span class="string">'undefined'</span>));</span><br><span class="line">console.log(<span class="string">"b defined? "</span> + (typeof b !== <span class="string">'undefined'</span>));</span><br></pre></td></tr></table></figure></p><p>由于a和b都在函数的封闭范围内定义，并且由于它们所在的行以var关键字开头,<br>因此大多数JavaScript开发人员会希望typeof a和typeof b在上面的示例中都未定义。<br>但是，情况并非如此。这里的问题是大多数开发人员错误地理解语句var a = b = 3;以下简写为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var b = 3;</span><br><span class="line">var a = b;</span><br></pre></td></tr></table></figure></p><p>但实际上，var a = b = 3;其实是速记：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = 3;</span><br><span class="line">var a = b;</span><br></pre></td></tr></table></figure></p><p>因此（如果您不使用严格模式），代码片段的输出将为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a defined? <span class="literal">false</span></span><br><span class="line">b defined? <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>但是如何在封闭函数的范围之外定义b？那么，因为声明var a = b = 3;是语句b = 3的简写;并且var a = b;<br>b最终成为一个全局变量（因为它不在var关键字后面），因此它仍然在作用域内，即使在封闭函数之外。</p><p>注意，在严格模式下（即，使用strict），语句var a = b = 3;会产生一个ReferenceError的运行时错误：<br>b没有定义，从而避免了可能导致的任何头headfakes/bugs。 （这就是为什么你应该在你的代码中使用strict，一个重要的例子！）</p><p>3.下面的代码将输出到控制台的是什么？，为什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var myObject = &#123;</span><br><span class="line">    foo: <span class="string">"bar"</span>,</span><br><span class="line">    func: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        console.log(<span class="string">"outer func: this.foo = "</span> + this.foo);</span><br><span class="line">        console.log(<span class="string">"outer func: self.foo = "</span> + self.foo);</span><br><span class="line">        (<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            console.log(<span class="string">"inner func: this.foo = "</span> + this.foo);</span><br><span class="line">            console.log(<span class="string">"inner func: self.foo = "</span> + self.foo);</span><br><span class="line">        &#125;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObject.func();</span><br></pre></td></tr></table></figure></p><p>在控制台将会输出如下结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">outer func: this.foo = bar</span><br><span class="line">outer func: self.foo = bar</span><br><span class="line">inner func: this.foo = undefined</span><br><span class="line">inner func: self.foo = bar</span><br></pre></td></tr></table></figure></p><p>在外面函数中self和this都指向myObject,因此都能访问到myObject中的foo属性。<br>在内部函数中，此时this的指向已经是window，而window中没有foo属性，所以为undefined。</p><p>4.考虑下面的两个函数。他们都会返回同样的值吗？为什么或者为什么不？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo1</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> &#123;</span><br><span class="line">      bar: <span class="string">"hello"</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo2</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">  &#123;</span><br><span class="line">      bar: <span class="string">"hello"</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>令人惊讶的是，这两个函数不会返回相同的结果。而是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"foo1 returns:"</span>);</span><br><span class="line">console.log(foo1());</span><br><span class="line">console.log(<span class="string">"foo2 returns:"</span>);</span><br><span class="line">console.log(foo2());</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo1 returns:</span><br><span class="line">Object &#123;bar: <span class="string">"hello"</span>&#125;</span><br><span class="line">foo2 returns:</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p>这不仅令人惊讶，而且特别令人烦恼的是，foo2()返回未定义而没有引发任何错误。<br>原因与JavaScript中分号在技术上是可选的事实有关（尽管忽略它们通常是非常糟糕的形式）。因此，在foo2()中遇到包含return语句的行<br>（没有其他内容）时，会在return语句之后立即自动插入分号。<br>由于代码的其余部分是完全有效的，即使它没有被调用或做任何事情（它只是一个未使用的代码块，它定义了一个属性栏，它等于字符串“hello”），<br>所以不会抛出任何错误。<br>这种行为也被认为是遵循了在JavaScript中将一行开头大括号放在行尾的约定，而不是在新行的开头。如此处所示，这不仅仅是JavaScript中的一种风格偏好。</p><p>5.下面的代码输出什么？解释你的答案。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(0.1 + 0.2);</span><br><span class="line">console.log(0.1 + 0.2 == 0.3);</span><br></pre></td></tr></table></figure></p><p>上面提供的示例是演示此问题的经典案例。令人惊讶的是，它会打印出来：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.30000000000000004</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>一个典型的解决方案是比较两个数字与特殊常数Number.EPSILON之间的绝对差值：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> areTheNumbersAlmostEqual(num1, num2) &#123;</span><br><span class="line">    <span class="built_in">return</span> Math.abs( num1 - num2 ) &lt; Number.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line">console.log(areTheNumbersAlmostEqual(0.1 + 0.2, 0.3));</span><br></pre></td></tr></table></figure></p><p>Math.abs()是取得数据的绝对值，Number.EPSILON 属性表示 1 和大于 1 的最小值（可表示为 Number）的差值。</p><p>6.编写一个简单的函数（少于160个字符），返回一个布尔值，指示字符串是否是回文。<br>如果str是回文，以下一行函数将返回true;否则，它返回false。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> isPalindrome(str) &#123;</span><br><span class="line">  str = str.replace(/\W/g, <span class="string">''</span>).toLowerCase();</span><br><span class="line">  <span class="built_in">return</span> (str == str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(isPalindrome(<span class="string">"level"</span>)); //  <span class="string">'true'</span></span><br><span class="line">console.log(isPalindrome(<span class="string">"levels"</span>)); //  <span class="string">'false'</span></span><br><span class="line">console.log(isPalindrome(<span class="string">"A car, a man, a maraca"</span>)); //  <span class="string">'true'</span></span><br></pre></td></tr></table></figure><p>7.考虑下面的代码片段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  var btn = document.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(document.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="title">function</span></span>()&#123; console.log(i); &#125;);</span><br><span class="line">  document.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(a) 当用户点击“按钮4”时，什么被记录到控制台？为什么？<br>(b) 提供一个或多个可按预期工作的替代实现。<br>答：<br>(a) 无论用户点击哪个按钮，数字5将始终记录到控制台。这是因为，在调用onclick方法（对于任何按钮）时，for循环已经完成，并且变量i已经具有值5.<br>（如果受访者知道足够的话就可以获得奖励点数关于执行上下文，变量对象，激活对象和内部“范围”属性如何影响闭包行为。）<br>(b) 使这项工作的关键是通过将它传递给新创建的函数对象来捕获每次通过for循环的i的值。以下是四种可能的方法来实现这一点：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  var btn = document.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(document.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, (<span class="keyword">function</span>(i)&#123; </span><br><span class="line">  <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  console.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)(i));</span><br><span class="line">  document.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者，您可以将新的匿名函数中的整个调用包装为btn.addEventListener：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  var btn = document.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(document.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  (<span class="keyword">function</span>(i)&#123;</span><br><span class="line">  btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  console.log(i)</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">  document.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，最简单的解决方案，如果你在ES6 / ES2015上下文中，就是使用let i而不是var i：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  var btn = document.createElement(<span class="string">'button'</span>);</span><br><span class="line">  btn.appendChild(document.createTextNode(<span class="string">'Button '</span> + i));</span><br><span class="line">  btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="title">function</span></span>()&#123; console.log(i); &#125;);</span><br><span class="line">  document.body.appendChild(btn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.下面的代码将输出到控制台,输出结果是什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(1 + <span class="string">"2"</span> + <span class="string">"2"</span>);</span><br><span class="line">console.log(1 + +<span class="string">"2"</span> + <span class="string">"2"</span>);</span><br><span class="line">console.log(1 + -<span class="string">"1"</span> + <span class="string">"2"</span>);</span><br><span class="line">console.log(+<span class="string">"1"</span> + <span class="string">"1"</span> + <span class="string">"2"</span>);</span><br><span class="line">console.log( <span class="string">"A"</span> - <span class="string">"B"</span> + <span class="string">"2"</span>);</span><br><span class="line">console.log( <span class="string">"A"</span> - <span class="string">"B"</span> + 2);</span><br></pre></td></tr></table></figure></p><p>输出的结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"122"</span></span><br><span class="line"><span class="string">"32"</span></span><br><span class="line"><span class="string">"02"</span></span><br><span class="line"><span class="string">"112"</span></span><br><span class="line"><span class="string">"NaN2"</span></span><br><span class="line"><span class="string">"NaN"</span></span><br></pre></td></tr></table></figure></p><p>这里的基本问题是JavaScript（ECMAScript）是一种松散类型的语言，它对值执行自动类型转换以适应正在执行的操作。让我们来看看这是如何与上面的每个例子进行比较。<br>示例1：1 +“2”+“2”输出：“122”说明：第一个操作在1 +“2”中执行。由于其中一个操作数（“2”）是一个字符串，所以JavaScript假定需要执行字符串连接，因此将1的类型转换为“1”，1 +“2”转换为“12”。然后，“12”+“2”产生“122”。<br>示例2：1 + +“2”+“2”输出：“32”说明：根据操作顺序，要执行的第一个操作是+“2”（第一个“2”之前的额外+被视为一个一元运算符）。因此，JavaScript将“2”的类型转换为数字，然后将一元+符号应用于它（即将其视为正数）。结果，下一个操作现在是1 + 2，当然这会产生3.但是，我们有一个数字和一个字符串之间的操作（即3和“2”），所以JavaScript再次转换数值赋给一个字符串并执行字符串连接，产生“32”。<br>示例3：1 + - “1”+“2”输出：“02”说明：这里的解释与前面的示例相同，只是一元运算符是 - 而不是+。因此，“1”变为1，然后在应用 - 时将其变为-1，然后将其加1到产生0，然后转换为字符串并与最终的“2”操作数连接，产生“02”。<br>示例4：+“1”+“1”+“2”输出：“112”说明：尽管第一个“1”操作数是基于其前面的一元+运算符的数值类型转换的，当它与第二个“1”操作数连接在一起时返回一个字符串，然后与最终的“2”操作数连接，产生字符串“112”。<br>示例5：“A” - “B”+“2”输出：“NaN2”说明：由于 - 运算符不能应用于字符串，并且既不能将“A”也不能将“B”转换为数值， “ - ”B“产生NaN，然后与字符串”2“串联产生”NaN2“。<br>例6：“A” - “B”+2输出：NaN说明：在前面的例子中，“A” - “B”产生NaN。但是任何运算符应用于NaN和其他数字操作数仍然会产生NaN。</p><p>9.以下代码的输出是什么：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>() &#123; console.log(i); &#125;, i * 1000 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>显示的代码示例不会显示值0,1,2,3和4，这可能是预期的;而是显示5,5,5,5,5。<br>这是因为循环内执行的每个函数将在整个循环完成后执行，因此所有函数都会引用存储在i中的最后一个值，即5。<br>通过为每次迭代创建一个唯一的作用域，可以使用闭包来防止这个问题，并将该变量的每个唯一值存储在其作用域中，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">(<span class="keyword">function</span>(i)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="title">function</span></span>() &#123; console.log(i); &#125;, i * 1000);</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在ES2015上下文中，您可以在原始代码中简单地使用let而不是var：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>() &#123; console.log(i); &#125;, i * 1000 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>10.以下代码的输出是什么？解释你的答案。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a=&#123;&#125;,</span><br><span class="line">    b=&#123;key:<span class="string">'b'</span>&#125;,</span><br><span class="line">    c=&#123;key:<span class="string">'c'</span>&#125;;</span><br><span class="line"></span><br><span class="line">a[b]=123;</span><br><span class="line">a[c]=456;</span><br><span class="line"></span><br><span class="line">console.log(a[b]);</span><br></pre></td></tr></table></figure></p><p>此代码的输出将是456（不是123）。<br>原因如下：设置对象属性时，JavaScript会隐式地将参数值串联起来。在这种情况下，由于b和c都是对象，它们都将被转换为“[object Object]”。因此，a [b]和a [c]都等价于[“[object Object]”]，并且可以互换使用。因此，设置或引用[c]与设置或引用[b]完全相同。</p><p>11.以下代码将输出到控制台以及为什么<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var hero = &#123;</span><br><span class="line">    _name: <span class="string">'John Doe'</span>,</span><br><span class="line">    getSecretIdentity: <span class="function"><span class="title">function</span></span> ()&#123;</span><br><span class="line">        <span class="built_in">return</span> this._name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var stoleSecretIdentity = hero.getSecretIdentity;</span><br><span class="line"></span><br><span class="line">console.log(stoleSecretIdentity());</span><br><span class="line">console.log(hero.getSecretIdentity());</span><br></pre></td></tr></table></figure></p><p>这段代码有什么问题，以及如何解决这个问题。<br>该代码将输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">undefined</span><br><span class="line">John Doe</span><br></pre></td></tr></table></figure></p><p>第一个console.log打印未定义，因为我们从hero对象中提取方法，所以stoleSecretIdentity()在window上下文的执行环境中被调用，而window中没有定义_name属性，所以为underfined。</p><p>修复stoleSecretIdentity()函数的一种方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var hero = &#123;</span><br><span class="line">    _name: <span class="string">'John Doe'</span>,</span><br><span class="line">    getSecretIdentity: <span class="function"><span class="title">function</span></span> ()&#123;</span><br><span class="line">        <span class="built_in">return</span> this._name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var stoleSecretIdentity = hero.getSecretIdentity.bind(hero);</span><br><span class="line"></span><br><span class="line">console.log(stoleSecretIdentity());</span><br><span class="line">console.log(hero.getSecretIdentity());</span><br></pre></td></tr></table></figure></p><p>12.以下输出的是什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var length = 10;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</span><br><span class="line">    console.log(this.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">  length: 5,</span><br><span class="line">  method: <span class="keyword">function</span>(fn) &#123;</span><br><span class="line">    fn();</span><br><span class="line">    arguments[0]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.method(fn, 1);</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>为什么不是10和5？</p><p>首先，由于fn作为函数方法的参数传递，函数fn的作用域（this）是窗口。 var length = 10;在窗口级别声明。它也可以作为window.length或length或this.length来访问（当这个===窗口时）。</p><p>方法绑定到Object obj，obj.method用参数fn和1调用。虽然方法只接受一个参数，但调用它时已经传递了两个参数;第一个是函数回调，其他只是一个数字。</p><p>当在内部方法中调用fn()时，该函数在全局级别作为参数传递，this.length将有权访问在Object obj中定义的var length = 10（全局声明）而不是length = 5。</p><p>现在，我们知道我们可以使用arguments []数组访问JavaScript函数中的任意数量的参数。</p><p>因此arguments0只不过是调用fn()。在fn里面，这个函数的作用域成为参数数组，并且记录参数[]的长度将返回2。</p><p>13.考虑下面的代码。输出是什么，为什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        throw new Error();</span><br><span class="line">    &#125; catch (x) &#123;</span><br><span class="line">        var x = 1, y = 2;</span><br><span class="line">        console.log(x);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(y);</span><br><span class="line">&#125;)();</span><br><span class="line">1</span><br><span class="line">undefined</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>var语句被挂起（没有它们的值初始化）到它所属的全局或函数作用域的顶部，即使它位于with或catch块内。但是，错误的标识符只在catch块内部可见。它相当于：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    var x, y; // outer and hoisted</span><br><span class="line">    try &#123;</span><br><span class="line">        throw new Error();</span><br><span class="line">    &#125; catch (x /* inner */) &#123;</span><br><span class="line">        x = 1; // inner x, not the outer one</span><br><span class="line">        y = 2; // there is only one y, <span class="built_in">which</span> is <span class="keyword">in</span> the outer scope</span><br><span class="line">        console.log(x /* inner */);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(y);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>14.以下几行输出什么，为什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(1 &lt; 2 &lt; 3);</span><br><span class="line">console.log(3 &gt; 2 &gt; 1);</span><br></pre></td></tr></table></figure></p><p>第一条语句返回true，如预期的那样。</p><p>第二个返回false是因为引擎如何针对&lt;和&gt;的操作符关联性工作。它比较从左到右，所以3&gt; 2&gt; 1 JavaScript翻译为true&gt; 1. true具有值1，因此它比较1&gt; 1，这是错误的。</p><p>15.如何在数组的开头添加元素？最后如何添加一个？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var myArray = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line">myArray.push(<span class="string">'end'</span>);</span><br><span class="line">myArray.unshift(<span class="string">'start'</span>);</span><br><span class="line">console.log(myArray); // [<span class="string">"start"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"end"</span>]</span><br></pre></td></tr></table></figure></p><p>使用ES6，可以使用扩展运算符：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myArray = [<span class="string">'start'</span>, ...myArray];</span><br><span class="line">myArray = [...myArray, <span class="string">'end'</span>];</span><br></pre></td></tr></table></figure></p><p>或者，简而言之：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myArray = [<span class="string">'start'</span>, ...myArray, <span class="string">'end'</span>];</span><br></pre></td></tr></table></figure></p><p>15.代码返回后会怎么样？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof typeof 1);</span><br></pre></td></tr></table></figure></p><p>打印结果：string<br>typeof 1将返回“number”，typeof“number”将返回字符串。</p><p>16.以下代码输出什么？为什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var b = 1;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">outer</span></span>()&#123;</span><br><span class="line">       var b = 2</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">inner</span></span>()&#123;</span><br><span class="line">        b++;</span><br><span class="line">        var b = 3;</span><br><span class="line">        console.log(b)</span><br><span class="line">    &#125;</span><br><span class="line">    inner();</span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure></p><p>输出到控制台将是“3”。</p><p>在这个例子中有三个闭包，每个都有它自己的var b声明。当调用变量时，将按照从本地到全局的顺序检查闭包，直到找到实例。由于内部闭包有自己的b变量，这就是输出。</p><p>此外，由于提升内部的代码将被解释如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">inner</span></span> () &#123;</span><br><span class="line">    var b; // b is undefined</span><br><span class="line">    b++; // b is NaN</span><br><span class="line">    b = 3; // b is 3</span><br><span class="line">    console.log(b); // output <span class="string">"3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上来自于xiaosheng222</p><p>17.以下代码输出什么？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var animal = <span class="function"><span class="title">function</span></span>()&#123;&#125;;</span><br><span class="line">var dog = <span class="function"><span class="title">function</span></span>()&#123;&#125;; </span><br><span class="line">animal.price = 2000;</span><br><span class="line">dog.prototype = animal; </span><br><span class="line">var tiddy = new dog();</span><br><span class="line">alert(dog.price);/*underfined*/</span><br><span class="line">alert(tiddy.price);/*2000*/</span><br></pre></td></tr></table></figure></p><p>因为原型链是依赖于<strong>proto</strong>，而不是prototype。dog是函数对象，本身没有price属性，此时dog的<strong>proto</strong>属性指向的是其构造函数的原型。 dog的构造函数就是Function，因为var dog = function(){};语句实际上是var dog = new Function();，所以，dog.<strong>proto</strong> === Function.prototype；⽽而Function.prototype并没有price属性，如果加一句：Function.prototype.price = 123；那么第一个打印就是<br>123；<br>如此依赖，tidy是一个普通对象，由dog函数构造而来，因此tidy<strong>proto</strong> == dog.prototype == animal；所以当tidy上找不到price属性时，会从<strong>proto</strong>寻找原型上的方法，找到animal对象， animal对象有price属性，则返回。</p><p>18.以下题目弹出的值是多少？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a=b=0; </span><br><span class="line">var c=d=&#123;x:1&#125;; </span><br><span class="line">b = 1;</span><br><span class="line">d.x = 1; </span><br><span class="line">alert(<span class="string">"a的值为："</span>+a+<span class="string">" b的值为:"</span>+b);</span><br><span class="line">alert(<span class="string">"c.x的值为："</span>+c.x+<span class="string">" d.x的值为:"</span>+d.x);</span><br></pre></td></tr></table></figure></p><p>弹出的结果为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a的值为：0 b的值为：1</span><br><span class="line">c.x的值为：1 d.x的值为：1</span><br></pre></td></tr></table></figure></p><p>此题考查的是基本类型和引用类型 a 声明变量时不同的内存分配。<br>1）    原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 – 栈中。这样存储便于迅速查寻变量的值。<br>2）    引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是⼀一个指针（point），指向存储对象的内存地址。 </p><p>19.以下代码执行结果是多少？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(1 == <span class="string">"1"</span>)&#123;</span><br><span class="line">  var x = 1;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  var z = 1;</span><br><span class="line">&#125; </span><br><span class="line">console.log(x);</span><br><span class="line">console.log(z);</span><br></pre></td></tr></table></figure></p><p>由于变量提升的缘故，相当于<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x;</span><br><span class="line">var z;</span><br><span class="line"><span class="keyword">if</span>(1 == <span class="string">"1"</span>)&#123;</span><br><span class="line">x = 1;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">z = 1;</span><br><span class="line">&#125;</span><br><span class="line">console.log(x);</span><br><span class="line">console.log(z);</span><br></pre></td></tr></table></figure></p><p>所以输出结果x为1，z为undefined </p><p>20.如何使数组去重?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,3,2,2,1];</span><br><span class="line">var newArr = [];</span><br><span class="line"><span class="keyword">for</span>(var i=0; i&lt;arr.length;i++)&#123; </span><br><span class="line"><span class="keyword">if</span>(newArr.indexOf(arr[i]) == -1)&#123; </span><br><span class="line">newArr.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">console.log(newArr)</span><br></pre></td></tr></table></figure></p><p>21.如何返回一个字符串中出现次数多的字母<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var str = <span class="string">"absbdsbdudbsu"</span>;</span><br><span class="line"><span class="keyword">function</span> count(str)&#123;</span><br><span class="line">  <span class="keyword">if</span>(str.length == 1)&#123;</span><br><span class="line">    <span class="built_in">return</span> str;  </span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    var wordNum = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(var i=0;i&lt;str.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!wordNum[str.charAt(i)])&#123;</span><br><span class="line">        wordNum[str.charAt(i)] = 1; </span><br><span class="line">   &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">    wordNum[str.charAt(i)]++; </span><br><span class="line">   &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  var wordMax = <span class="string">''</span>,</span><br><span class="line">    max = 0;</span><br><span class="line">  <span class="keyword">for</span>(var i <span class="keyword">in</span> wordNum)&#123;</span><br><span class="line">    <span class="keyword">if</span>(wordNum[i]&gt;max)&#123;</span><br><span class="line">      wordMax = i;      </span><br><span class="line">      max = wordNum[i] </span><br><span class="line">   &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">return</span> wordMax </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line">console.log(count(str))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;容易出错的JavaScript题目集锦&quot;&gt;&lt;a href=&quot;#容易出错的JavaScript题目集锦&quot; class=&quot;headerlink&quot; title=&quot;容易出错的JavaScript题目集锦&quot;&gt;&lt;/a&gt;容易出错的JavaScript题目集锦&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://yangyiii.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈深浅复制</title>
    <link href="https://yangyiii.github.io/2018/05/17/clone/"/>
    <id>https://yangyiii.github.io/2018/05/17/clone/</id>
    <published>2018-05-17T14:41:11.000Z</published>
    <updated>2018-05-17T14:47:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浅谈深浅复制"><a href="#浅谈深浅复制" class="headerlink" title="浅谈深浅复制"></a>浅谈深浅复制</h2><p>在开发过程中，我们常常会遇到对复杂对象中数据的复制。这时候就存在两种情况，一个是复制引用，一个是复制实例。这也就是浅复制和深复制。<br><a id="more"></ap><h3 id="什么是深度复制和浅度复制呢？"><a href="#什么是深度复制和浅度复制呢？" class="headerlink" title="什么是深度复制和浅度复制呢？"></a>什么是深度复制和浅度复制呢？</h3><p>深度复制和浅度复制都是针对像Array、Object等复杂对象而言的。<br>对对象而言，浅复制是指是对对象地址的复制，没有开辟新的栈，也就是复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，则另一个对象的属性也会改变；而深复制则是开辟新的栈，两个对象对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。</p><h3 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var testArray = [0,1,2]</span><br><span class="line">var copyArray = testArray;</span><br><span class="line">copyArray[0] = <span class="string">"change"</span>;</span><br><span class="line">console.log(copyArray); //输出[<span class="string">"change"</span>, 1, 2]</span><br><span class="line">console.log(testArray);//输出[<span class="string">"change"</span>, 1, 2]</span><br></pre></td></tr></table></figure><p>由上面的例子可以看出，当改变复制数组中的值时，原来的数组值也会被改变。</p><h3 id="深度复制"><a href="#深度复制" class="headerlink" title="深度复制"></a>深度复制</h3><p>深度复制情况比较复杂</p><h3 id="1-slice-和concat-方法"><a href="#1-slice-和concat-方法" class="headerlink" title="1.slice()和concat()方法"></a>1.slice()和concat()方法</h3><p>Array的slice和concat方法都会返回一个新的数组实例，但是这两个方法对于数组中的对象元素却没有执行深复制，而只是复制了引用了，因此这两个方法并不是真正的深复制，通过以下代码进行理解：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,2,3];</span><br><span class="line">var array_shallow = array;</span><br><span class="line">var array_concat = array.concat();</span><br><span class="line">var array_slice = array.slice(0);</span><br><span class="line">array[0] = 2;</span><br><span class="line">console.log(array_shallow);//[2,2,3]</span><br><span class="line">console.log(array_concat);//[1,2,3]</span><br><span class="line">console.log(array_slice)//[1,2,3]</span><br></pre></td></tr></table></figure></p><p>这里的复制只复制了一层，如果有多层属性的话，还是指向同一个内存地址，看下方的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var array = [1, [1,2,3], &#123;name:<span class="string">"array"</span>&#125;];</span><br><span class="line">var array_concat = array.concat();</span><br><span class="line">var array_slice = array.slice(0);</span><br><span class="line">//改变array_concat中数组元素的值</span><br><span class="line">array_concat[1][0] = 5;</span><br><span class="line">console.log(array[1]);    //[5,2,3]</span><br><span class="line">console.log(array_slice[1]);  //[5,2,3]</span><br><span class="line">//改变array_slice中对象元素的值</span><br><span class="line">array_slice[2].name = <span class="string">"array_slice"</span>;</span><br><span class="line">console.log(array[2].name);   //array_slice</span><br><span class="line">console.log(array_concat[2].name); //array_slice</span><br></pre></td></tr></table></figure></p><p>这里的例子可以看出不是真正的深度复制，只是对对象进行了引用</p><h3 id="2-Object-assign"><a href="#2-Object-assign" class="headerlink" title="2.Object.assign()"></a>2.Object.assign()</h3><p>看下方的例子，相信你大概就明白了这个方法到底是深度复制还是浅复制<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a:1,b:2&#125;;</span><br><span class="line">var objclone = Object.assign(&#123;&#125;,obj);</span><br><span class="line">obj.c = 3;</span><br><span class="line">console.log(obj); //输出 &#123;a:1,b:2,c:3&#125;</span><br><span class="line">console.log(objclone); //输出&#123;a:1,b:2&#125;</span><br></pre></td></tr></table></figure></p><p>再来一个~<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> obj = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    c: &#123;</span><br><span class="line">        age: 30</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var objclone = Object.assign(&#123;&#125;,obj);</span><br><span class="line">console.log(<span class="string">'objclone: '</span>, objclone);</span><br><span class="line">obj.c.age = 45;</span><br><span class="line">console.log(<span class="string">'After Change - obj: '</span>, obj.c.age); // 45 - This also changes</span><br><span class="line">console.log(<span class="string">'After Change - objclone: '</span>, objclone.c.age); // 45</span><br></pre></td></tr></table></figure></p><p>所以Object.assign() 只是一级属性复制，比浅拷贝多深拷贝了一层而已。对于多层属性的复制，它也是属于浅复制。</p><h3 id="3-JSON实现"><a href="#3-JSON实现" class="headerlink" title="3.JSON实现"></a>3.JSON实现</h3><p>JSON对象下有两个方法，一是将JS对象转换成字符串对象的JSON.stringify方法；一个是将字符串对象转换成JS对象的JSON.parse方法。这两个方法结合使用可以实现对象的深复制。也就是说，当我们需要复制一个obj对象时，可以先调用JSON.stringify(obj)，将其转换为字符串对象，然后再调用JSON.parse方法，将其转换为JS对象。就可以轻松的实现对象的深复制<br>看下方例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    c: &#123;</span><br><span class="line">        age: 30</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var copyObject = JSON.parse(JSON.stringify(obj));</span><br><span class="line">copyObject.c.age = 45;</span><br><span class="line">console.log(obj) //obj=&#123;a:1,b:2,c:&#123;age:30&#125;&#125;</span><br><span class="line">console.log(copyObject)  //copyObject=&#123;a:1,b:2,c:&#123;age:45&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>使用这种方式实现深复制有一个缺点就是必须给JSON.parse方法传入的字符串必须是合法的JSON，否则会抛出错误</p><h3 id="4-采用递归解决"><a href="#4-采用递归解决" class="headerlink" title="4.采用递归解决"></a>4.采用递归解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var testObject = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    c: &#123;</span><br><span class="line">        age: 30</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> deepCopy(obj,copy)&#123;</span><br><span class="line">    var copy = copy || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(var i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(typeof obj[i] === <span class="string">'object'</span>)&#123;</span><br><span class="line">          //要考虑深复制问题了</span><br><span class="line">            <span class="keyword">if</span>(obj[i].constructor === Array)&#123;</span><br><span class="line">            copy[i] =[];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            copy[i] = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            deepCopy(obj[i],copy[i]);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        copy[i] = obj[i];</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line">var copyObject = deepCopy(testObject);</span><br><span class="line">copyObject.c.age = 45;</span><br><span class="line">console.log(testObject) //&#123;a: 1,b: 2,c: &#123;age: 30&#125;&#125;;</span><br></pre></td></tr></table></figure><p>这种方法的缺点是对于数据庞大的对象运行效率较低</p><p>以上是对深度复制和浅度复制的理解，如果有不对的地方欢迎指正哟，相互学习讨论~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浅谈深浅复制&quot;&gt;&lt;a href=&quot;#浅谈深浅复制&quot; class=&quot;headerlink&quot; title=&quot;浅谈深浅复制&quot;&gt;&lt;/a&gt;浅谈深浅复制&lt;/h2&gt;&lt;p&gt;在开发过程中，我们常常会遇到对复杂对象中数据的复制。这时候就存在两种情况，一个是复制引用，一个是复制实例。这也就是浅复制和深复制。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://yangyiii.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 的基本命令</title>
    <link href="https://yangyiii.github.io/2017/12/29/hello-world/"/>
    <id>https://yangyiii.github.io/2017/12/29/hello-world/</id>
    <published>2017-12-29T08:02:53.000Z</published>
    <updated>2017-12-14T01:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span> <span class="comment">#文件名称</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="开启预览访问端口"><a href="#开启预览访问端口" class="headerlink" title="开启预览访问端口"></a>开启预览访问端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server <span class="comment">#默认端口4000</span></span><br></pre></td></tr></table></figure><p>如默认端口被占用，则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -p 5000</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="清除缓存，网页正常情况下可以忽略此条命令"><a href="#清除缓存，网页正常情况下可以忽略此条命令" class="headerlink" title="清除缓存，网页正常情况下可以忽略此条命令"></a>清除缓存，网页正常情况下可以忽略此条命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="生成静态页面至public目录"><a href="#生成静态页面至public目录" class="headerlink" title="生成静态页面至public目录"></a>生成静态页面至public目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="将-deploy目录部署到GitHub"><a href="#将-deploy目录部署到GitHub" class="headerlink" title="将.deploy目录部署到GitHub"></a>将.deploy目录部署到GitHub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>变量/函数声明提升</title>
    <link href="https://yangyiii.github.io/2017/12/20/function/"/>
    <id>https://yangyiii.github.io/2017/12/20/function/</id>
    <published>2017-12-20T08:24:08.000Z</published>
    <updated>2018-04-18T08:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>此篇粗略的讲解下变量/函数声明提升。<br><a id="more"></a></p><h3 id="什么是变量提升呢？"><a href="#什么是变量提升呢？" class="headerlink" title="什么是变量提升呢？"></a>什么是变量提升呢？</h3><p>正如字面意思，就是把定义在后面的变量或函数，提升到前面来使用。<br>变量提升，简单来说，就是把定义的变量提升到一块作用域当中（或者说一个函数）顶端的位置，需要注意的是，变量提升，只是提示变量的声明，并不会将变量的赋值一同提升上来。</p><p>比如下面代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">var a = 1;</span><br><span class="line">var b = 2;</span><br><span class="line">var c = 3;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>我们在函数中定义了3个变量，而实际上，相当于这种写法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">var a,b,c；</span><br><span class="line">a = 1;</span><br><span class="line">b = 2;</span><br><span class="line">c = 3;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h3 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h3><p>函数创建有两种方法<br>函数声明语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="string">'hello world!'</span>);</span><br><span class="line"><span class="keyword">function</span> f(name) &#123;</span><br><span class="line">console.log(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行上面的程序，控制台能打印出hello world!</p><p>函数表达式语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="string">'hello world!'</span>);</span><br><span class="line">var f = <span class="keyword">function</span>(name) &#123;</span><br><span class="line">console.log(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行上面的代码，会报错Uncaught ReferenceError: f is not defined(…)错误信息，显示f没有被定义。<br>因为，函数声明有一个非常重要的特征：函数声明提升，函数声明语句将会被提升到外部脚本或者外部函数作用域的顶部。正是因为这个特征，所以可以把函数声明刚在调用它的语句后面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var getName = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getName</span></span>()&#123;</span><br><span class="line">console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">getName();</span><br></pre></td></tr></table></figure></p><p>正如前面所说到的函数声明提升，函数声明function getName(){}的声明会被提前到顶部，而函数表达式var getName = function(){}则表现出变量提升。因此在这种情况下，getName也是一个变量，因此这个变量的声明也将提升到顶部，而变量的赋值依然保留在原来的位置。<br>相当于<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var getName;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getName</span></span>()&#123;</span><br><span class="line">console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">getName = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(2);</span><br><span class="line">&#125;</span><br><span class="line">getName();    //最终输出2</span><br></pre></td></tr></table></figure></p><p>在原来的例子中，函数声明虽然是在函数表达式后面，但由于函数声明提升到顶部，因此后面getName又被函数表达式的赋值操作给覆盖了，所以输出2.<br>特别说明：函数提升会先于变量提升,看下面这个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof name)//输出<span class="keyword">function</span></span><br><span class="line">var name = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">name</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>下面一题来测测你是否完全理解<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Foo</span></span>()&#123;</span><br><span class="line">getName = <span class="function"><span class="title">function</span></span>()&#123; alert(1) &#125;;</span><br><span class="line"><span class="built_in">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="title">function</span></span>()&#123; alert(2) &#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="title">function</span></span>()&#123; alert(3) &#125;;</span><br><span class="line">var getName = <span class="function"><span class="title">function</span></span>()&#123; alert(4) &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getName</span></span>()&#123; alert(5) &#125;;</span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line">new Foo.getName();</span><br><span class="line">new Foo().getName();</span><br><span class="line">new new Foo().getName();</span><br></pre></td></tr></table></figure></p><p>答案<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Foo.getName();              //2</span><br><span class="line">getName();                  //4</span><br><span class="line">Foo().getName();            //1</span><br><span class="line">getName();                  //1</span><br><span class="line">new Foo.getName();          //2</span><br><span class="line">new Foo().getName();        //3</span><br><span class="line">new new Foo().getName();    //3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇粗略的讲解下变量/函数声明提升。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://yangyiii.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>span间隙</title>
    <link href="https://yangyiii.github.io/2017/12/14/span%E9%97%B4%E9%9A%99/"/>
    <id>https://yangyiii.github.io/2017/12/14/span间隙/</id>
    <published>2017-12-14T02:24:44.000Z</published>
    <updated>2018-05-17T14:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做移动端项目时，经常会碰到span元素之间存在诡异的间隙问题。这种间隙会导致一些布局上的问题，下面是几种解决的方法。<br><a id="more"></a></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line"><span class="comment">#demo span &#123;display: inline-block; background-color: #ccc;&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/images/span.png" alt="图片"></p><p>在上述例子中，定义为inline-block的元素之间会产生间隙，那要是不定义为inline-block呢？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line"><span class="comment">#demo span &#123; background-color: #ccc;&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>效果图<br><img src="/images/span.png" alt="图片"></p><p>上面例子中，对span元素不做任何处理，依然会存在间隙，那如果把span元素放在一行显示会是怎么样的效果？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;&lt;span&gt;span元素&lt;/span&gt;&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line"><span class="comment">#demo span &#123; background-color: #ccc;&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>效果图<br><img src="/images/span2.png" alt="图片"></p><p>可以发现，span元素之间的空隙消失了。说明这个间隙是由换行或者回车导致的，只要把标签写成一行就不会出现间隙，但是这种方法不太可靠，常常会因为一些因素失效。<br>下面介绍一下几种写法：<br>写法1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;&lt;span&gt;span元素&lt;/span&gt;&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>写法2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;&lt;span&gt;</span><br><span class="line">span元素&lt;/span&gt;&lt;span&gt;</span><br><span class="line">span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>写法3：利用HTML注释标签<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;&lt;!--</span><br><span class="line">--&gt;&lt;span&gt;span元素&lt;/span&gt;&lt;!--</span><br><span class="line">--&gt;&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>写法4：取消标签闭合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素</span><br><span class="line">&lt;span&gt;span元素</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>把span结束标签去掉，但需注意最后一个标签需要闭合。</p><p>写法5：把父级的font-size设为0,在子元素上设置相应的字体大小<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line"><span class="comment">#demo &#123;font-size:0;&#125;</span></span><br><span class="line"><span class="comment">#demo span &#123; background-color: #ccc;font-size:14px;&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>对于Chrome, 其默认有最小字体大小限制，考虑到兼容性，需要取消字体大小限制，这样写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;span&gt;span元素&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line"><span class="comment">#demo &#123;font-size:0;-webkit-text-size-adjust:none;&#125;</span></span><br><span class="line"><span class="comment">#demo span &#123; background-color: #ccc;font-size:14px;&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做移动端项目时，经常会碰到span元素之间存在诡异的间隙问题。这种间隙会导致一些布局上的问题，下面是几种解决的方法。&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="https://yangyiii.github.io/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>解決某些手机（移动端）无法触发touchend事件</title>
    <link href="https://yangyiii.github.io/2017/12/11/touch/"/>
    <id>https://yangyiii.github.io/2017/12/11/touch/</id>
    <published>2017-12-11T08:32:13.000Z</published>
    <updated>2017-12-14T02:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发移动端项目，虽然不用兼容头疼的IE浏览器，但是面对市场上各款手机兼容问题，也是一个持久战。这篇主要讲touch事件的兼容问题。<br><a id="more"></a></p><h2 id="解決某些手机（移动端）无法触发touchend事件"><a href="#解決某些手机（移动端）无法触发touchend事件" class="headerlink" title="解決某些手机（移动端）无法触发touchend事件"></a>解決某些手机（移动端）无法触发touchend事件</h2><h3 id="触屏事件的基本过程"><a href="#触屏事件的基本过程" class="headerlink" title="触屏事件的基本过程"></a>触屏事件的基本过程</h3><p>js的触屏事件，主要有三个事件：touchstart，touchmove，touchend。</p><p>这三个事件最重要的属性是 pageX和 pageY，表示X坐标，Y坐标。<br>touchstart=在触摸开始时触发事件<br>touchend=在触摸结束时触发事件<br>touchmove=这个事件比较奇怪，按道理在触摸到过程中不断激发这个事件才对，但是在我的 Android 1.5 中，在 touchstart 激发后激发一次，然后剩余的都和 touchend 差不多同时激发。</p><p>而在我做的一个项目中，在某些手机上会出现不能触发touchend事件。</p><p>部分代码如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> listSlideChange(options) &#123;</span><br><span class="line">var delObj = options.find(<span class="string">'.cheque-sign-row'</span>),</span><br><span class="line">touchStartX = 0,</span><br><span class="line">touchMoveX = 0,</span><br><span class="line">touchSlideValue = 0,</span><br><span class="line">touchStartY = 0,</span><br><span class="line">touchMoveY = 0,</span><br><span class="line">touchSlideValue2 = 0,</span><br><span class="line">boxWidth = 0;</span><br><span class="line"><span class="keyword">for</span>(var i = 0; i &lt; delObj.length; i++) &#123;</span><br><span class="line">(<span class="keyword">function</span>(i) &#123;</span><br><span class="line">delObj.eq(i).off(<span class="string">"touchstart.touch"</span>).on(<span class="string">'touchstart.touch'</span>, <span class="keyword">function</span>(e) &#123;</span><br><span class="line">moveFlag = <span class="literal">false</span>;</span><br><span class="line">var e = e || window.event;</span><br><span class="line">touchStartX = e.originalEvent.changedTouches[0].pageX;</span><br><span class="line">touchStartY = e.originalEvent.changedTouches[0].pageY;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">delObj.eq(i).off(<span class="string">"touchmove.touch"</span>).on(<span class="string">'touchmove.touch'</span>, <span class="keyword">function</span>(e) &#123;</span><br><span class="line"><span class="keyword">if</span> ($(this).hasClass(<span class="string">"disabled"</span>)) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">var e = e || window.event;</span><br><span class="line">boxWidth = parseInt($(<span class="string">'.transfer-plan-change'</span>).width());</span><br><span class="line">var touchMoveX = e.originalEvent.changedTouches[0].pageX;</span><br><span class="line">touchSlideValue = touchStartX - touchMoveX;</span><br><span class="line">var touchMoveY = e.originalEvent.changedTouches[0].pageY;</span><br><span class="line">touchSlideValue2 = touchStartY - touchMoveY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Math.abs(touchSlideValue2)&lt;Math.abs(touchSlideValue))&#123;</span><br><span class="line"><span class="keyword">if</span>(isSlideflag) &#123;</span><br><span class="line">$(delObj).stop().animate(&#123;</span><br><span class="line"><span class="string">'left'</span>: <span class="string">'0'</span></span><br><span class="line">&#125;, 200);</span><br><span class="line">touchSlideValue = 0;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(touchSlideValue &gt; 0 &amp;&amp; touchSlideValue &lt; boxWidth) &#123;</span><br><span class="line">$(this).css(<span class="string">'left'</span>, -touchSlideValue);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(touchSlideValue &gt; boxWidth) &#123;</span><br><span class="line">$(this).css(<span class="string">'left'</span>, -boxWidth);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$(this).css(<span class="string">'left'</span>, <span class="string">'0'</span>);</span><br><span class="line">touchSlideValue = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">moveFlag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">delObj.eq(i).off(<span class="string">"touchend.touch"</span>).on(<span class="string">'touchend.touch'</span>, <span class="keyword">function</span>(e) &#123;</span><br><span class="line"><span class="keyword">if</span> ($(this).hasClass(<span class="string">"disabled"</span>)) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">var e = e || window.event;</span><br><span class="line"><span class="keyword">if</span>(moveFlag) &#123;</span><br><span class="line"><span class="keyword">if</span>(touchSlideValue &gt; 60) &#123;</span><br><span class="line">$(this).stop().animate(&#123;</span><br><span class="line"><span class="string">'left'</span>: -boxWidth</span><br><span class="line">&#125;, 200);</span><br><span class="line">isSlideflag = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$(this).stop().animate(&#123;</span><br><span class="line"><span class="string">'left'</span>: <span class="string">'0'</span></span><br><span class="line">&#125;, 200);</span><br><span class="line">touchSlideValue = 0;</span><br><span class="line">isSlideflag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(touchSlideValue === 0) &#123;</span><br><span class="line">showChequeList($(this).find(<span class="string">".cheque-sign-arrow"</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$(delObj).stop().animate(&#123;</span><br><span class="line"><span class="string">'left'</span>: <span class="string">'0'</span></span><br><span class="line">&#125;, 200);</span><br><span class="line">touchSlideValue = 0;</span><br><span class="line">isSlideflag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是移动端最常见的功能，手指向左滑显示删除按钮。当你滑的比较少的距离，touchend时会隐藏这个删除按钮，只有你滑动到一定距离的时候，才会把整个删除按钮显示出来。而在某些手机上无法触发touchend事件，导致出现一半的按钮。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p> 只要在 touchstart 的时候调用下 event.preventDefault(); 即可让其他事件都正常被触发了!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发移动端项目，虽然不用兼容头疼的IE浏览器，但是面对市场上各款手机兼容问题，也是一个持久战。这篇主要讲touch事件的兼容问题。&lt;br&gt;
    
    </summary>
    
      <category term="mobile" scheme="https://yangyiii.github.io/categories/mobile/"/>
    
    
  </entry>
  
  <entry>
    <title>冒泡事件和默认事件</title>
    <link href="https://yangyiii.github.io/2017/02/16/%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6%E5%92%8C%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6/"/>
    <id>https://yangyiii.github.io/2017/02/16/冒泡事件和默认事件/</id>
    <published>2017-02-16T06:09:12.000Z</published>
    <updated>2017-12-14T02:03:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>浅淡事件冒泡和默认事件<br><a id="more"></a></p><h2 id="如何使用jQuery阻止事件冒泡和默认事件"><a href="#如何使用jQuery阻止事件冒泡和默认事件" class="headerlink" title="如何使用jQuery阻止事件冒泡和默认事件"></a>如何使用jQuery阻止事件冒泡和默认事件</h2><h3 id="什么是事件冒泡？"><a href="#什么是事件冒泡？" class="headerlink" title="什么是事件冒泡？"></a>什么是事件冒泡？</h3><p>事件从事件目标开始，往上冒泡直到页面上的最上一级标签。（这与事件捕获顺序相反）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"content"</span>&gt;</span><br><span class="line">外层div元素</span><br><span class="line">&lt;span&gt;内层span元素&lt;/span&gt;</span><br><span class="line">外层div元素</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"msg"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">$(<span class="string">"#content"</span>).<span class="built_in">bind</span>(<span class="string">"click"</span>,<span class="keyword">function</span>(e)&#123;</span><br><span class="line">var txt=$(<span class="string">"#msg"</span>).html()+<span class="string">"&lt;p&gt;外层div元素被点击&lt;/p&gt;"</span>;</span><br><span class="line">$(<span class="string">"#msg"</span>).html(txt);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"span"</span>).<span class="built_in">bind</span>(<span class="string">"click"</span>,<span class="keyword">function</span>(e)&#123;</span><br><span class="line">var txt=$(<span class="string">"#msg"</span>).html()+<span class="string">"&lt;p&gt;内层span元素被点击&lt;/p&gt;"</span>;</span><br><span class="line">$(<span class="string">"#msg"</span>).html(txt);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当点击span元素时会触发click事件,显示内层span元素被点击，同时因为事件冒泡，会触发content元素绑定的事件。</p><h3 id="为什么要阻止事件冒泡呢？"><a href="#为什么要阻止事件冒泡呢？" class="headerlink" title="为什么要阻止事件冒泡呢？"></a>为什么要阻止事件冒泡呢？</h3><p>当某个DOM节点绑定了某事件监听器时，本来是想该DOM节点触发事件，才来执行某种操作。结果是该节点的某后代节点触发某事件，由于事件冒泡，该DOM节点事件也会触发，执行了该绑定事件的操作，这样就违背了最初的本意。</p><p>###如何阻止事件冒泡？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.box1&#123;</span><br><span class="line">height:200px;</span><br><span class="line">width:600px;</span><br><span class="line">margin:0 auto;</span><br><span class="line">border:1px solid <span class="comment">#000;</span></span><br><span class="line">&#125;</span><br><span class="line">.box1 a&#123;</span><br><span class="line">display:block;</span><br><span class="line">height:50%;</span><br><span class="line">width:50%;</span><br><span class="line">background:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">"box1"</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">"http://www.baidu.com"</span> target=<span class="string">"_blank"</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">$(<span class="string">".box1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(<span class="string">"1"</span>);//不阻止事件冒泡会打印1 ，页面跳转</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当点击a元素时，触发a本身的事件，同时也会触发父级绑定的click事件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">$(<span class="string">".box1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(<span class="string">"1"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">".box1 a"</span>).click(<span class="keyword">function</span>(e)&#123;</span><br><span class="line">e.stopPropagation();//不会打印a,但是页面会跳转</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> 阻止了冒泡事件，点击a元素时，不会触发父级box1的绑定事件。但是会执行a的默认事件（跳转到百度页面）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">$(<span class="string">".box1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(<span class="string">"1"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">".box1 a"</span>).click(<span class="keyword">function</span>(e)&#123;</span><br><span class="line">e.preventDefault();//页面不会跳转，但是会打印出1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> 阻止了a的默认事件，页面不会跳转，但是会触发父级的绑定事件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">$(<span class="string">".box1"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">console.log(<span class="string">"1"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">".box1 a"</span>).click(<span class="keyword">function</span>(e)&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;//不会打印1,页面不会跳转</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> 同时阻止了冒泡事件和默认事件，你也可以把return false替换成e.preventDefault()和e.stopPropagation();</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浅淡事件冒泡和默认事件&lt;br&gt;
    
    </summary>
    
      <category term="jquery" scheme="https://yangyiii.github.io/categories/jquery/"/>
    
    
  </entry>
  
</feed>
